// <auto-generated />
using System;
using CSMapi;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CSMapi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250707025611_4")]
    partial class _4
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CSMapi.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Removed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("CSMapi.Models.ColdStorage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Csnumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Coldstorages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            Csnumber = "1"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            Csnumber = "2"
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            Csnumber = "3"
                        },
                        new
                        {
                            Id = 4,
                            Active = true,
                            Csnumber = "4"
                        },
                        new
                        {
                            Id = 5,
                            Active = true,
                            Csnumber = "5"
                        },
                        new
                        {
                            Id = 6,
                            Active = true,
                            Csnumber = "6"
                        },
                        new
                        {
                            Id = 7,
                            Active = true,
                            Csnumber = "7"
                        },
                        new
                        {
                            Id = 8,
                            Active = true,
                            Csnumber = "8"
                        },
                        new
                        {
                            Id = 9,
                            Active = true,
                            Csnumber = "9"
                        });
                });

            modelBuilder.Entity("CSMapi.Models.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Agreementdate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Createdon")
                        .HasColumnType("datetime2");

                    b.Property<int>("Creatorid")
                        .HasColumnType("int");

                    b.Property<string>("Endlease")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lesseecompany")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lesseecompanylocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lesseeiddetail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lesseeidtype")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lesseerepresentative")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lesseerepresentativeposition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lessorcompany")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lessorcompanylocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lessoriddetail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lessoridtype")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lessorrepresentative")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lessorrepresentativeposition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notarylocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Removed")
                        .HasColumnType("bit");

                    b.Property<string>("Sealdate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Startlease")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Updatedon")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Creatorid");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("CSMapi.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Companyaddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Companyemail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Companyname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Companynumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Removed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("CSMapi.Models.Dispatching", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Approvedon")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Approverid")
                        .HasColumnType("int");

                    b.Property<DateTime>("Createdon")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Declined")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Declinedon")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Dispatchdate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Dispatched")
                        .HasColumnType("bit");

                    b.Property<string>("Dispatchplateno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dispatchtimeend")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dispatchtimestart")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Documentid")
                        .HasColumnType("int");

                    b.Property<string>("Nmiscertificate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Overallweight")
                        .HasColumnType("float");

                    b.Property<bool>("Pending")
                        .HasColumnType("bit");

                    b.Property<int>("Productid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Productiondate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Removed")
                        .HasColumnType("bit");

                    b.Property<int>("Requestorid")
                        .HasColumnType("int");

                    b.Property<string>("Sealno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Temperature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Updatedon")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Approverid");

                    b.HasIndex("Documentid");

                    b.HasIndex("Productid");

                    b.HasIndex("Requestorid");

                    b.ToTable("Dispatchings");
                });

            modelBuilder.Entity("CSMapi.Models.DispatchingDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Dispatchingid")
                        .HasColumnType("int");

                    b.Property<bool>("Fulldispatched")
                        .HasColumnType("bit");

                    b.Property<int>("Palletid")
                        .HasColumnType("int");

                    b.Property<bool>("Partialdispatched")
                        .HasColumnType("bit");

                    b.Property<int>("Positionid")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Receivingdetailid")
                        .HasColumnType("int");

                    b.Property<double>("Totalweight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("Dispatchingid");

                    b.HasIndex("Palletid");

                    b.HasIndex("Positionid");

                    b.HasIndex("Receivingdetailid");

                    b.ToTable("Dispatchingdetails");
                });

            modelBuilder.Entity("CSMapi.Models.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Documentno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("CSMapi.Models.LeasedPresmises", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Contractid")
                        .HasColumnType("int");

                    b.Property<string>("Facility")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specific")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Contractid");

                    b.ToTable("Leasedpremises");
                });

            modelBuilder.Entity("CSMapi.Models.Pallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Createdon")
                        .HasColumnType("datetime2");

                    b.Property<int>("Creatorid")
                        .HasColumnType("int");

                    b.Property<bool>("Occupied")
                        .HasColumnType("bit");

                    b.Property<int?>("Palletno")
                        .HasColumnType("int");

                    b.Property<string>("Pallettype")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Removed")
                        .HasColumnType("bit");

                    b.Property<string>("Taggingnumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Updatedon")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Creatorid");

                    b.ToTable("Pallets");
                });

            modelBuilder.Entity("CSMapi.Models.PalletPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Column")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Csid")
                        .HasColumnType("int");

                    b.Property<string>("Floor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Hidden")
                        .HasColumnType("bit");

                    b.Property<bool>("Removed")
                        .HasColumnType("bit");

                    b.Property<string>("Side")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Wing")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Csid");

                    b.ToTable("Palletpositions");
                });

            modelBuilder.Entity("CSMapi.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("Categoryid")
                        .HasColumnType("int");

                    b.Property<int>("Customerid")
                        .HasColumnType("int");

                    b.Property<string>("Deliveryunit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Productcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Productname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Productpackaging")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<bool>("Removed")
                        .HasColumnType("bit");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Variant")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("Categoryid");

                    b.HasIndex("Customerid");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("CSMapi.Models.Receiving", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Approverid")
                        .HasColumnType("int");

                    b.Property<DateTime>("Arrivaldate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Createdon")
                        .HasColumnType("datetime2");

                    b.Property<string>("Cvnumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Datedeclined")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Datereceived")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Declined")
                        .HasColumnType("bit");

                    b.Property<int>("Documentid")
                        .HasColumnType("int");

                    b.Property<DateTime>("Expirationdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Overallweight")
                        .HasColumnType("float");

                    b.Property<bool>("Pending")
                        .HasColumnType("bit");

                    b.Property<string>("Platenumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Productid")
                        .HasColumnType("int");

                    b.Property<bool>("Received")
                        .HasColumnType("bit");

                    b.Property<string>("Receivingform")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Removed")
                        .HasColumnType("bit");

                    b.Property<int>("Requestorid")
                        .HasColumnType("int");

                    b.Property<string>("Unloadingend")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unloadingstart")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Updatedon")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Approverid");

                    b.HasIndex("Documentid");

                    b.HasIndex("Productid");

                    b.HasIndex("Requestorid");

                    b.ToTable("Receivings");
                });

            modelBuilder.Entity("CSMapi.Models.ReceivingDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Duquantity")
                        .HasColumnType("int");

                    b.Property<double>("Duweight")
                        .HasColumnType("float");

                    b.Property<bool>("Fulldispatched")
                        .HasColumnType("bit");

                    b.Property<int>("Palletid")
                        .HasColumnType("int");

                    b.Property<bool>("Partialdispatched")
                        .HasColumnType("bit");

                    b.Property<int>("Positionid")
                        .HasColumnType("int");

                    b.Property<DateTime>("Productiondate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantityinapallet")
                        .HasColumnType("int");

                    b.Property<bool>("Received")
                        .HasColumnType("bit");

                    b.Property<int>("Receivingid")
                        .HasColumnType("int");

                    b.Property<double>("Totalweight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("Palletid");

                    b.HasIndex("Positionid");

                    b.HasIndex("Receivingid");

                    b.ToTable("Receivingdetails");
                });

            modelBuilder.Entity("CSMapi.Models.Repalletization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Createdon")
                        .HasColumnType("datetime2");

                    b.Property<int>("Creatorid")
                        .HasColumnType("int");

                    b.Property<int>("Frompalletid")
                        .HasColumnType("int");

                    b.Property<int>("Topalletid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Creatorid");

                    b.ToTable("Repalletizations");
                });

            modelBuilder.Entity("CSMapi.Models.RepalletizationDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Quantitymoved")
                        .HasColumnType("int");

                    b.Property<int>("Receivingdetailid")
                        .HasColumnType("int");

                    b.Property<int>("Repalletizationid")
                        .HasColumnType("int");

                    b.Property<double>("Weightmoved")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("Receivingdetailid")
                        .IsUnique();

                    b.HasIndex("Repalletizationid");

                    b.ToTable("Repalletizationdetails");
                });

            modelBuilder.Entity("CSMapi.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Removed")
                        .HasColumnType("bit");

                    b.Property<string>("Rolename")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Removed = false,
                            Rolename = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Removed = false,
                            Rolename = "User"
                        },
                        new
                        {
                            Id = 3,
                            Removed = false,
                            Rolename = "Approver"
                        });
                });

            modelBuilder.Entity("CSMapi.Models.Tagging", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<bool>("Occupied")
                        .HasColumnType("bit");

                    b.Property<int>("PalletId")
                        .HasColumnType("int");

                    b.Property<bool>("Removed")
                        .HasColumnType("bit");

                    b.Property<string>("Taggingnumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PalletId");

                    b.ToTable("Taggings");
                });

            modelBuilder.Entity("CSMapi.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Businessunit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Businessunitlocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Createdon")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Esignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Removed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Updatedon")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Businessunit = "ABFI Central Office",
                            Businessunitlocation = "Binugao, Toril, Davao City",
                            Createdon = new DateTime(2025, 7, 7, 10, 56, 11, 239, DateTimeKind.Unspecified).AddTicks(8336),
                            Department = "Cisdevo",
                            Firstname = "James Jecemeco",
                            Lastname = "Tabilog",
                            Password = "$2a$11$7LeZFvnUVCcb1De4hRm2l.SxbYTOiOOt3mjwR5/PeUPATBAJctxla",
                            Position = "Software Developer",
                            Removed = false,
                            Role = "Admin, User, Approver",
                            Username = "211072"
                        },
                        new
                        {
                            Id = 2,
                            Businessunit = "SubZero Ice and Cold Storage Inc",
                            Businessunitlocation = "Binugao, Toril, Davao City",
                            Createdon = new DateTime(2025, 7, 7, 10, 56, 11, 415, DateTimeKind.Unspecified).AddTicks(4263),
                            Department = "Executive",
                            Firstname = "Shiela",
                            Lastname = "Hernando",
                            Password = "$2a$11$gsAbJls5AF3sf8VbaYLiW.g6ISIhxenJOdVNh3KKlBS04oscne7r2",
                            Position = "Senior Operations Manager",
                            Removed = false,
                            Role = "Approver",
                            Username = "211073"
                        },
                        new
                        {
                            Id = 3,
                            Businessunit = "ABFI Central Office",
                            Businessunitlocation = "Binugao, Toril, Davao City",
                            Createdon = new DateTime(2025, 7, 7, 10, 56, 11, 595, DateTimeKind.Unspecified).AddTicks(2100),
                            Department = "Cisdevo",
                            Firstname = "Jerecho",
                            Lastname = "Asilum",
                            Password = "$2a$11$OIKe1w5GvIuGRVqSOsGi3eDiypm5v9.vhhyhamg8vUxtSjYwMhoHi",
                            Position = "Software Developer",
                            Removed = false,
                            Role = "Admin, User, Approver",
                            Username = "211028"
                        });
                });

            modelBuilder.Entity("CSMapi.Models.Contract", b =>
                {
                    b.HasOne("CSMapi.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("Creatorid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("CSMapi.Models.Dispatching", b =>
                {
                    b.HasOne("CSMapi.Models.User", "Approver")
                        .WithMany()
                        .HasForeignKey("Approverid");

                    b.HasOne("CSMapi.Models.Document", "Document")
                        .WithMany("Dispatching")
                        .HasForeignKey("Documentid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CSMapi.Models.Product", "Product")
                        .WithMany("Dispatching")
                        .HasForeignKey("Productid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CSMapi.Models.User", "Requestor")
                        .WithMany()
                        .HasForeignKey("Requestorid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("Document");

                    b.Navigation("Product");

                    b.Navigation("Requestor");
                });

            modelBuilder.Entity("CSMapi.Models.DispatchingDetail", b =>
                {
                    b.HasOne("CSMapi.Models.Dispatching", "Dispatching")
                        .WithMany("Dispatchingdetails")
                        .HasForeignKey("Dispatchingid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CSMapi.Models.Pallet", "Pallet")
                        .WithMany("DispatchDetail")
                        .HasForeignKey("Palletid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CSMapi.Models.PalletPosition", "PalletPosition")
                        .WithMany("DispatchingDetail")
                        .HasForeignKey("Positionid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CSMapi.Models.ReceivingDetail", "Receivingdetail")
                        .WithMany("DispatchingDetail")
                        .HasForeignKey("Receivingdetailid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Dispatching");

                    b.Navigation("Pallet");

                    b.Navigation("PalletPosition");

                    b.Navigation("Receivingdetail");
                });

            modelBuilder.Entity("CSMapi.Models.LeasedPresmises", b =>
                {
                    b.HasOne("CSMapi.Models.Contract", "Contract")
                        .WithMany("Leasedpremises")
                        .HasForeignKey("Contractid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("CSMapi.Models.Pallet", b =>
                {
                    b.HasOne("CSMapi.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("Creatorid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("CSMapi.Models.PalletPosition", b =>
                {
                    b.HasOne("CSMapi.Models.ColdStorage", "Coldstorage")
                        .WithMany("Palletposition")
                        .HasForeignKey("Csid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coldstorage");
                });

            modelBuilder.Entity("CSMapi.Models.Product", b =>
                {
                    b.HasOne("CSMapi.Models.Category", "Category")
                        .WithMany("Product")
                        .HasForeignKey("Categoryid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CSMapi.Models.Customer", "Customer")
                        .WithMany("Product")
                        .HasForeignKey("Customerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CSMapi.Models.Receiving", b =>
                {
                    b.HasOne("CSMapi.Models.User", "Approver")
                        .WithMany()
                        .HasForeignKey("Approverid");

                    b.HasOne("CSMapi.Models.Document", "Document")
                        .WithMany("Receiving")
                        .HasForeignKey("Documentid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CSMapi.Models.Product", "Product")
                        .WithMany("Receiving")
                        .HasForeignKey("Productid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CSMapi.Models.User", "Requestor")
                        .WithMany()
                        .HasForeignKey("Requestorid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("Document");

                    b.Navigation("Product");

                    b.Navigation("Requestor");
                });

            modelBuilder.Entity("CSMapi.Models.ReceivingDetail", b =>
                {
                    b.HasOne("CSMapi.Models.Pallet", "Pallet")
                        .WithMany("ReceivingDetail")
                        .HasForeignKey("Palletid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CSMapi.Models.PalletPosition", "PalletPosition")
                        .WithMany("ReceivingDetail")
                        .HasForeignKey("Positionid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CSMapi.Models.Receiving", "Receiving")
                        .WithMany("Receivingdetails")
                        .HasForeignKey("Receivingid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pallet");

                    b.Navigation("PalletPosition");

                    b.Navigation("Receiving");
                });

            modelBuilder.Entity("CSMapi.Models.Repalletization", b =>
                {
                    b.HasOne("CSMapi.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("Creatorid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("CSMapi.Models.RepalletizationDetail", b =>
                {
                    b.HasOne("CSMapi.Models.ReceivingDetail", "Receivingdetail")
                        .WithOne("RepalletizationDetail")
                        .HasForeignKey("CSMapi.Models.RepalletizationDetail", "Receivingdetailid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CSMapi.Models.Repalletization", "Repalletization")
                        .WithMany("RepalletizationDetail")
                        .HasForeignKey("Repalletizationid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receivingdetail");

                    b.Navigation("Repalletization");
                });

            modelBuilder.Entity("CSMapi.Models.Tagging", b =>
                {
                    b.HasOne("CSMapi.Models.Pallet", "Pallet")
                        .WithMany()
                        .HasForeignKey("PalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pallet");
                });

            modelBuilder.Entity("CSMapi.Models.Category", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("CSMapi.Models.ColdStorage", b =>
                {
                    b.Navigation("Palletposition");
                });

            modelBuilder.Entity("CSMapi.Models.Contract", b =>
                {
                    b.Navigation("Leasedpremises");
                });

            modelBuilder.Entity("CSMapi.Models.Customer", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("CSMapi.Models.Dispatching", b =>
                {
                    b.Navigation("Dispatchingdetails");
                });

            modelBuilder.Entity("CSMapi.Models.Document", b =>
                {
                    b.Navigation("Dispatching");

                    b.Navigation("Receiving");
                });

            modelBuilder.Entity("CSMapi.Models.Pallet", b =>
                {
                    b.Navigation("DispatchDetail");

                    b.Navigation("ReceivingDetail");
                });

            modelBuilder.Entity("CSMapi.Models.PalletPosition", b =>
                {
                    b.Navigation("DispatchingDetail");

                    b.Navigation("ReceivingDetail");
                });

            modelBuilder.Entity("CSMapi.Models.Product", b =>
                {
                    b.Navigation("Dispatching");

                    b.Navigation("Receiving");
                });

            modelBuilder.Entity("CSMapi.Models.Receiving", b =>
                {
                    b.Navigation("Receivingdetails");
                });

            modelBuilder.Entity("CSMapi.Models.ReceivingDetail", b =>
                {
                    b.Navigation("DispatchingDetail");

                    b.Navigation("RepalletizationDetail")
                        .IsRequired();
                });

            modelBuilder.Entity("CSMapi.Models.Repalletization", b =>
                {
                    b.Navigation("RepalletizationDetail");
                });
#pragma warning restore 612, 618
        }
    }
}
